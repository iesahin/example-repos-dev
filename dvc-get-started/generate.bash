#!/bin/bash
# See https://dvc.org/doc/start

# Setup script env:
#   e   Exit immediately if a command exits with a non-zero exit status.
#   u   Treat unset variables as an error when substituting.
#   x   Print commands and their arguments as they are executed.
set -eux

export HERE="$( cd "$(dirname "$0")" ; pwd -P )"
export REPO_NAME="dvc-get-started-$(date +%F-%H-%M-%S)"
export REPO_PATH="${HERE}/build/${REPO_NAME}"
export PUSH_SCRIPT="${HERE}/build/push-${REPO_NAME}.sh"

TOTAL_TAGS=20
export STEP_TIME=100000
export TAG_TIME=$(( $(date +%s) - ( ${TOTAL_TAGS} * ${STEP_TIME}) ))
export GIT_AUTHOR_NAME="Dee Vee"
export GIT_AUTHOR_EMAIL="dee@dvc.org"
export GIT_COMMITTER_NAME="Dee Vee"
export GIT_COMMITTER_EMAIL="dee@dvc.org"

if [ -d "$REPO_PATH" ]; then
    echo "Repo $REPO_PATH already exists, please remove it first."
    exit 1
fi

mkdir -p $REPO_PATH
pushd $REPO_PATH

virtualenv -p python3 .venv
export VIRTUAL_ENV_DISABLE_PROMPT=true
source .venv/bin/activate
echo '.venv/' > .gitignore

pip install 'dvc[all]'

# Create the main branch 
${HERE}/generate-main.bash
# Create the checkpoints branch
${HERE}/generate-checkpoints.bash

popd

cat > ${PUSH_SCRIPT} <<EOF
#!/bin/bash

set -eux

# The Git repo generated by this script is intended to be published on
# https://github.com/iterative/dvc-get-started. Make sure the Github repo
# exists first and that you have appropriate write permissions.

# If the Github repo already exists, run these commands to rewrite it:
cd ${HERE}/build/${REPO_NAME} 
git remote add origin git@github.com:iterative/dvc-get-started.git
# Delete all tags in the remote
for tag in \$(git ls-remote --tags origin | grep -v '{}$' | cut -c 52-) ; do 
    git push -v origin --delete \${tag}
done
git push --force origin --all --follow-tags
# dvc exp list --all --names-only | xargs -n 1 dvc exp push origin
cd -


EOF

chmod u+x ${PUSH_SCRIPT}

cat << EOF
##################################
### REPOSITORY GENERATION DONE ###
##################################

Push script is written to: ${PUSH_SCRIPT}
You can run it with"
$ ${PUSH_SCRIPT}
You may remove the generated repo with:
$ rm -fR ${REPO_PATH}
EOF

unset HERE
unset REPO_NAME
unset REPO_PATH
unset PUSH_SCRIPT
unset STEP_TIME
unset TAG_TIME
unset GIT_AUTHOR_NAME
unset GIT_AUTHOR_EMAIL
unset GIT_COMMITTER_NAME
unset GIT_COMMITTER_EMAIL
